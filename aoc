#!/usr/bin/python3

import os
import argparse
import subprocess
import requests


CACHE_FILENAME = '.cache/{}_{}_input.txt'

GNUTIME_BINARY = '/bin/time'
TIMESTRING = """
Total elapsed time: %e s.
  System: %S
  User:   %U
Page faults (mjr/mnr): %F/%R
Swaps: %W
Context switches (inv/vol): %c/%w
Exit status: %x
""".strip()


def parse_args():
    parser = argparse.ArgumentParser(
        description="""
Download or take from a cache the input for an AoC problem, then
run the solution with this input and present the result; along with
stats about the process. If it takes long enough the stats will keep
updating. The solution is expected to be a single executable file in a
directory named after the year in the working directory, with its name
as the day, and that takes the problem(1 for part 1, 2 for part 2) as
its argument.""".strip(),
        epilog="""
A file called session.txt must exist within the working directory
when this script is executed. A new directory called .cache may be
created also on the working directory.  """.strip()
    )

    parser.add_argument(
        '--debug',
        action='store_true',
        help="""Add this argument to run the debug verison. No statistics are
printed.""".strip()
    )

    parser.add_argument(
        '--input',
        type=argparse.FileType('r'),
        help="""Use given file as input. If - is passed, read input from
stdin.""".strip()
    )
    parser.add_argument(
        '--simple',
        action='store_true',
        help="""Just spawn the process in the same terminal and let it go
wild""".strip()
    )

    parser.add_argument(
        'year',
        type=int,
        help="""Year of the problem"""
    )
    parser.add_argument(
        'day',
        type=int,
        help="""Day of the problem"""
    )
    parser.add_argument(
        'problem',
        type=int,
        help="""Part of the problem (1 or 2)"""
    )

    return parser.parse_args()


def get_input(year: int, day: int) -> str:
    inputstr = get_input_from_cache(year, day)
    if inputstr is None:
        inputstr = get_input_from_aoc(year, day)
        if inputstr is not None:
            save_input_to_cache(year, day, inputstr)
    return inputstr


def get_input_from_cache(year: int, day: int) -> str:
    filename = CACHE_FILENAME.format(year, day)
    try:
        with open(filename, 'r') as f:
            return f.read()
    except IOError:
        return None


def get_session() -> str:
    with open('session.txt') as f:
        return f.read().strip()


def get_filename(year: int, day: int, debug: bool) -> str:
    return '{}/{}{}'.format(year, day, '_dbg' if debug else '_rel')


def get_input_from_aoc(year: int, day: int) -> str:
    url = "https://adventofcode.com/{}/day/{}/input".format(year, day)
    cookies = {'session': get_session()}
    r = requests.get(url, cookies=cookies)
    r.raise_for_status()
    return r.text


def save_input_to_cache(year: int, day: int, input: str):
    os.makedirs('.cache', exist_ok=True)
    filename = CACHE_FILENAME.format(year, day)
    with open(filename, 'w') as f:
        f.write(input)


def launch_solution(year: int, day: int, problem: int,
                    debug: bool, input: str, simple: bool):
    process_name = get_filename(year, day, debug)

    if simple:
        process = subprocess.Popen(
            [process_name, str(problem)],
            stdin=subprocess.PIPE
        )
    elif debug:
        process = subprocess.Popen(
            [
                process_name,
                str(problem)
            ],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE
        )
    else:
        process = subprocess.Popen(
            [
                GNUTIME_BINARY,
                '-f', TIMESTRING,
                process_name,
                str(problem)
            ],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

    out, err = process.communicate(input.encode('ascii'))

    if simple:
        return None, None
    elif debug:
        return \
            out.decode('ascii', errors='backslashreplace'), \
            None
    else:
        return \
            out.decode('ascii', errors='backslashreplace'), \
            err.decode('ascii', errors='backslashreplace')


def prepare_solution(year, day, debug):
    subprocess.run(['make', get_filename(year, day, debug)])


def unprepare_solution(year, day, debug):
    subprocess.run(['rm', get_filename(year, day, debug)])


def print_results(result, summary):
    if summary is not None:
        print()
        print('Summary:')
        print(summary)
    if result is not None:
        print('Result:', result)


def main():
    args = parse_args()

    if args.input is None:
        input = get_input(args.year, args.day)
    else:
        input = args.input.read()

    prepare_solution(args.year, args.day, args.debug)
    try:
        result, summary = launch_solution(args.year, args.day, args.problem,
                                          args.debug, input, args.simple)
    finally:
        unprepare_solution(args.year, args.day, args.debug)

    print_results(result, summary)


if __name__ == "__main__":
    main()
